install.packages("shiny")
2+2
2*2
clear
clear;
print('Hola mundo con R')
10000000
10000^100
?mean
x <- matrix(1 : 9, byrow = TRUE, nrow = 3)
View(x)
View(x)
View(x)
View(x)
?max
max(100/4, 108/5, 200/20, sqrt(81), 35, na.rm = FALSE)
library(readr)
rows <- read_csv("https://data.montgomerycountymd.gov/api/views/2qd6-mr43/rows.csv")
View(rows)
install.packages("readr")
install.packages("readr")
BankChurners.csv <- read.csv("C:/Users/infrabyte/Downloads/BankChurners.csv.zip", sep="")
View(BankChurners.csv)
resultado <- ((43012180)+10)/4.1
install.packages(“ggplot2”)
install.packages("ggplot2")
install.packages("dplyr")
mean(c[5,7])
mean(c[5,7])
?mean
mean(c[5,7], na.rm = FALSE)
mean(x)
mean(c[5,7])
?builtin
mean(x)
library(ggplot2)
library(ggplot2)
mean(5,7)
mean(x)
mean(c(5,7))
mean(c(9))
source('~/.active-rstudio-document', echo=TRUE)
x <- 5
2 * x + 3
pais <- "Colombia"
nchar(pais)
conf <- read.csv("st19ncov-confirmados.csv")
mu <- read.csv("st19ncov-muertes.csv")
# Eliminamos la primer fila
Sconf <- conf[-1, ]
Smu <- mu[-1, ]
summary(Sconf)
Sconf <- select(Sconf, Country.Region, Date, Value) # País,
Sconf <- rename(Sconf, Country = Country.Region, Infectados = Value) # Cambiamos el nombre de las variables
Sconf <- mutate(Sconf, Date = as.Date(Date, "%Y-%m-%d"), Infectados = as.numeric(Infectados)) # Transformamos la variable
# Seleccionamos país, fecha y acumulado de muertos
Smu <- select(Smu, Country.Region, Date, Value)
Smu <- rename(Smu, Country = Country.Region, Muertos = Value) # Renombramos
Smu <- mutate(Smu, Date = as.Date(Date, "%Y-%m-%d"), Muertos = as.numeric(Muertos)) # Transformamos
# Unimos infectados y muertos acumulados para cada fecha
Scm <- merge(Sconf, Smu)
mex <- filter(Scm, Country == "Mexico") # Seleccionamos sólo a México
mex <- filter(mex, Infectados != 0) # Comienzan los infectados en México
mex <- mutate(mex, NI = c(1, diff(Infectados))) # Nuevos infectados por día
mex <- mutate(mex, NM = c(0, diff(Muertos))) # Nuevos muertos por día
mex <- mutate(mex, Letalidad = round(Muertos/Infectados*100, 1)) # Tasa de letalidad
mex <- mutate(mex, IDA = lag(Infectados), MDA = lag(Muertos)) # Valores día anterior
mex <- mutate(mex, FCI = Infectados/IDA, FCM = Muertos/MDA) # Factores de Crecimiento
mex <- mutate(mex, Dia = 1:dim(mex)[1]) # Días de contingencia
conf <- read.csv("st19ncov-confirmados.csv")
mu <- read.csv("st19ncov-muertes.csv")
# Eliminamos la primer fila
Sconf <- conf[-1, ]
Smu <- mu[-1, ]
summary(Sconf)
Sconf <- select(Sconf, Country.Region, Date, Value) # País,
Sconf <- rename(Sconf, Country = Country.Region, Infectados = Value) # Cambiamos el nombre de las variables
Sconf <- mutate(Sconf, Date = as.Date(Date, "%Y-%m-%d"), Infectados = as.numeric(Infectados)) # Transformamos la variable
# Seleccionamos país, fecha y acumulado de muertos
Smu <- select(Smu, Country.Region, Date, Value)
Smu <- rename(Smu, Country = Country.Region, Muertos = Value) # Renombramos
Smu <- mutate(Smu, Date = as.Date(Date, "%Y-%m-%d"), Muertos = as.numeric(Muertos)) # Transformamos
# Unimos infectados y muertos acumulados para cada fecha
Scm <- merge(Sconf, Smu)
mex <- filter(Scm, Country == "Mexico") # Seleccionamos sólo a México
mex <- filter(mex, Infectados != 0) # Comienzan los infectados en México
mex <- mutate(mex, NI = c(1, diff(Infectados))) # Nuevos infectados por día
mex <- mutate(mex, NM = c(0, diff(Muertos))) # Nuevos muertos por día
mex <- mutate(mex, Letalidad = round(Muertos/Infectados*100, 1)) # Tasa de letalidad
mex <- mutate(mex, IDA = lag(Infectados), MDA = lag(Muertos)) # Valores día anterior
mex <- mutate(mex, FCI = Infectados/IDA, FCM = Muertos/MDA) # Factores de Crecimiento
mex <- mutate(mex, Dia = 1:dim(mex)[1]) # Días de contingencia
conf <- read.csv("st19ncov-confirmados.csv")
?table
install.packages("xml2")
data <- read_xml("	http://201.116.60.29/servicios/api/Ambiental/AguaRenovableEDO/2019")
install.packages("XML")
url <- "http://201.116.60.29/servicios/api/Ambiental/AguaRenovableEDO/2019"
library(XML)
bm  <- read_xml("http://api.worldbank.org/countries/all/indicators/NY.GDP.MKTP.CD?date=2009:2010&per_page=500&page=1")
library(xml2)
bm  <- read_xml("http://api.worldbank.org/countries/all/indicators/NY.GDP.MKTP.CD?date=2009:2010&per_page=500&page=1")
View(bm)
esp <- xml_find_all(bm, "//*/wb:data[wb:country[@id='ES']]/wb:value")
View(esp)
as.numeric(xml_text(esp))
library("methods")
url <- "http://201.116.60.29/servicios/api/Ambiental/AguaRenovableEDO/2019"
library(XML)
library("methods")
library(XML)
data <- xmlParse(file = url)
data
print(data)
class(data)
dfdata <- xmlToDataFrame(data)
View(dfdata)
print(dfdata)
print(dfdata[1])
print(dfdata[[1]])
print(dfdata[,1])
print(dfdata[1])
# Obteniendo datos de calidad del aire en JSON
url2 <- "https://api.datos.gob.mx/v1/calidadAire"
install.packages("jsonlite")
library(jsonlite)3
library(jsonlite)
data2 <- fromJSON(url2)
install.packages("curl")
data2 <- fromJSON(url2)
class(data2)
View(data2)
data2$results$stations
View(data2$results$stations)
# Obteniendo datos de calidad del aire en JSON
url2 <- "https://api.datos.gob.mx/v2/sinaica"
data2 <- fromJSON(url2)
data2
View(data2)
View(data2$results)
data2 <- data2$results
View(data2)
# Obteniendo datos de calidad del agua en XML a DF
url <- "http://201.116.60.29/servicios/api/Ambiental/AguaRenovableEDO/2019"
data <- xmlParse(file = url)
dfdata <- xmlToDataFrame(data)
View(dfdata)
install.packages(“languageserver”)
install.packages("languageserver")
set.seed(1)
w <- rnorm(100)
plot(w)
plot(w, type = "l", xlab = "")
title(main = "Ruido Blanco Gaussiano", xlab = "Tiempo")
x <- seq(-3, 3, length = 1000)
hist(rnorm(100), prob = T, ylab = "", xlab = "", main = "")
points(x, dnorm(x), type = "l")
title(ylab = "Densidad", xlab = "Valores simulados de la distribución normal estandar",
main = "Comparación de una muestra con su población subyacente")
x <- seq(-3, 3, length = 1000)
hist(rnorm(100), prob = T, ylab = "", xlab = "", main = "")
points(x, dnorm(x), type = "l")
title(ylab = "Densidad", xlab = "Valores simulados de la distribución normal estandar",
main = "Comparación de una muestra con su población subyacente")
x <- seq(-3, 3, length = 1000)
hist(rnorm(100), prob = T, ylab = "", xlab = "", main = "")
points(x, dnorm(x), type = "l")
title(ylab = "Densidad", xlab = "Valores simulados de la distribución normal estandar",
main = "Comparación de una muestra con su población subyacente")
x <- seq(-3, 3, length = 1000)
hist(rnorm(100), prob = T, ylab = "", xlab = "", main = "")
points(x, dnorm(x), type = "l")
title(ylab = "Densidad", xlab = "Valores simulados de la distribución normal estandar",
main = "Comparación de una muestra con su población subyacente")
x <- seq(-3, 3, length = 1000)
hist(rnorm(100), prob = T, ylab = "", xlab = "", main = "")
points(x, dnorm(x), type = "l")
title(ylab = "Densidad", xlab = "Valores simulados de la distribución normal estandar",
main = "Comparación de una muestra con su población subyacente")
set.seed(2)
acf(rnorm(100), main = "")
title(main = "Función de Autocorrelación Muestral",
sub = "Valores simulados de la distribución normal estandar")
set.seed(2)
acf(rnorm(100), main = "")
title(main = "Función de Autocorrelación Muestral",
sub = "Valores simulados de la distribución normal estandar")
set.seed(2)
acf(rnorm(100), main = "")
title(main = "Función de Autocorrelación Muestral",
sub = "Valores simulados de la distribución normal estandar")
x <- w <- rnorm(1000)
for(t in 2:1000) x[t] <- x[t-1] + w[t]
plot(x, type = "l", main = "Caminata Aleatoria Simulada",
xlab = "t", ylab = expression(x[t]),
sub = expression(x[t]==x[t-1]+w[t]))
acf(x, main = "")
title(main = "Correlograma para la caminata aleatoria simulada",
sub = expression(x[t]==x[t-1]+w[t]))
x <- w <- rnorm(1000)
for(t in 2:1000) x[t] <- x[t-1] + w[t]
plot(x, type = "l", main = "Caminata Aleatoria Simulada",
xlab = "t", ylab = expression(x[t]),
sub = expression(x[t]==x[t-1]+w[t]))
acf(x, main = "")
title(main = "Correlograma para la caminata aleatoria simulada",
sub = expression(x[t]==x[t-1]+w[t]))
acf(diff(x), main = "")
title(main = "Correlograma de la serie de diferencias",
sub = expression(nabla*x[t]==x[t]-x[t-1]))
setwd("C:/Users/infrabyte/Documents/Github/Project-bedu/Bedu-ProyectoR-CA/data")
DataEsta_PM10 <- read.csv("PDEstacion_PM10.csv", header = T)
CordsZ <- read.csv("cat_estacion - cat_estacion.csv", header = T)
#### SHAPE
setwd("C:/Users/infrabyte/Documents/Github/Project-bedu/Bedu-ProyectoR-CA/data/shape")
shape <- readOGR("C:/Users/infrabyte/Documents/Github/Project-bedu/shiny-app/data2", "limite250_l")
library(shiny)
library(dashboardthemes)
library(leaflet)
library(rgdal)
library(dplyr)
library(DT)
shape <- readOGR("C:/Users/infrabyte/Documents/Github/Project-bedu/shiny-app/data2", "limite250_l")
shape <- spTransform(shape, CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
?req
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
dir()
setwd("C:/Users/infrabyte/Documents/Github/Project-bedu/Bedu-ProyectoR-CA/data")
dir()
DataEsta_PM25 <- read.csv("PDEstacion_PM25.csv", header = T)
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
DataEsta_PM10 <- DataEsta_PM10[-1]
DataEsta_PM25 <- DataEsta_PM25[-1]
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
library(shinythemes)
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
data_PM2524h
#Para poner el promedio diario por año de PM25
data_PM2524h<-read.csv("PDEstacion_PM25.csv",header=T)
View(data_PM2524h)
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
library(ggplot2)
View(DataEsta_PM10)
View(DataEsta_PM10)
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
install.packages("plotly")
library(plotly)
library(plotly)
p <- ggplot(data = DataEsta_PM10[DataEsta_PM10$ZONA=="NO" & DataEsta_PM10$Year==2020,],
aes(x = Date, y = PromDiario)) +
labs(x="Meses, Enero=1", y="Concentración promedio diaria PM25") +
geom_line(aes(group = station, color = station)) +
labs(color= "Estación") +
geom_hline(yintercept=45)+theme_bw()
View(p)
fig <- ggplotly(p)
fig
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
Sys.Date()
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
View(DataEsta_PM10)
head(DataEsta_PM10)
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
View(DataEsta_PM10)
DataEsta_PM10 <- rename(DataEsta_PM10, Fecha = Date)
View(DataEsta_PM10)
DataEsta_PM25 <- rename(DataEsta_PM25, Fecha = Date)
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
View(DataEsta_PM10)
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
print(input$dateRange[1])
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
View(DataEsta_PM25)
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
rsconnect::showLogs()
install.packages('rsconnect')
rsconnect::showLogs()
shiny::runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
library(shiny)
library(dashboardthemes)
library(leaflet)
library(rgdal)
library(dplyr)
library(DT)
library(ggplot2)
library(plotly)
library(shiny)
library(dashboardthemes)
library(shinydashboard)
library(shinythemes)
library(leaflet)
library(rgdal)
library(dplyr)
library(DT)
runApp('~/Github/Project-bedu/Bedu-ProyectoR-CA')
